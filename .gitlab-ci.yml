stages:
    - checkProviderKubernetes
    - preflight
    - build
    - push
    - delete

checkProviderk8s:
    image: 
        name: alpine/k8s:1.22.10
    stage: checkProviderKubernetes
    rules: 
        - if: $PROVIDER == "k8s"
          allow_failure: true
    before_script:
      - mkdir ~/.kube/
      - echo ${KUBE_CONFIG} | base64 -d > ~/.kube/config
    script:
        kubectl create namespace ${NAMESPACE} && kubectl label namespace ${NAMESPACE} istio-injection=enabled

delete:
    image: 
      name: hashicorp/terraform 
      entrypoint:
      - /usr/bin/env
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    stage: delete
    variables:
      GIT_STRATEGY: clone
    rules: 
      - if: $STATUS == "deleting"
    before_script:
      - git config --global user.name "${GITLAB_USER_NAME}"
      - git config --global user.email "${GITLAB_USER_EMAIL}"
    script:
        - git remote set-url origin http://gitlab-ci-token:${ACCESS_TOKEN}@192.168.110.134/root/marketplace.git
        - git fetch
        - git checkout customer/${CUSTOMERNAME} 
        - cd ./terraform/customers/${CUSTOMERNAME}/${ID}/
        - terraform init 
        - terraform destroy -auto-approve 
        - cd ../
        - rm -rf ${ID}
        - git rm -r ${ID} 
        - git commit --allow-empty -m "DELETEION OF ${CUSTOMERNAME}-${NAMESPACE}-${MODULE_NAME}-${NAME}-${ID}-${CI_PIPELINE_ID}"
        - git push -f --set-upstream origin HEAD:customer/${CUSTOMERNAME} -o ci.skip



preflight:
    rules: 
        - if: $STATUS != "deleting"
    image: 
      name: alpine:3.14
      entrypoint:
        - /usr/bin/env 
    stage: preflight
    script:
        - apk update && apk add gettext
        - mkdir -p ./terraform/customers/${CUSTOMERNAME}/${ID}
        - envsubst < ./terraform/templates/${MODULE_NAME}.tf > ./terraform/customers/${CUSTOMERNAME}/${ID}/${MODULE_NAME}.tf
    artifacts:
        paths:
        - ./terraform/customers/${CUSTOMERNAME}/${ID}/*

build:
    image: 
      name: hashicorp/terraform 
      entrypoint:
      - /usr/bin/env
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    stage: build
    rules: 
    - if: $STATUS != "deleting"
    script:
        - cd ./terraform/customers/${CUSTOMERNAME}/${ID}/
        - terraform init 
        - terraform apply -auto-approve 
    artifacts:
        paths:
        - ./terraform/customers/${CUSTOMERNAME}/${ID}/*

push:
    stage: push
    rules: 
    - if: $STATUS != "deleting"
    image:
      name: alpine/git:latest
      entrypoint:
        - /usr/bin/env 
    before_script:
      - git config --global user.name "${GITLAB_USER_NAME}"
      - git config --global user.email "${GITLAB_USER_EMAIL}"
    script:
      - ls -ltr ./
      - git remote set-url origin http://gitlab-ci-token:${ACCESS_TOKEN}@192.168.110.134/root/marketplace.git
      - git checkout -b customer/${CUSTOMERNAME} || git checkout customer/${CUSTOMERNAME} 
      - git pull --set-upstream origin customer/${CUSTOMERNAME} || echo 'nothing to pull'
      - git add ./terraform/customers/${CUSTOMERNAME}/${ID}/*.tf*
      - git rm ./.gitlab-ci.yml || echo 'nothing to delete'
      - git commit --allow-empty -m "${CUSTOMERNAME}-${NAMESPACE}-${MODULE_NAME}-${NAME}-${ID}-${CI_PIPELINE_ID}"
      - git push -f --set-upstream origin HEAD:customer/${CUSTOMERNAME} -o ci.skip
    retry: 2
    after_script:
    - mv ./terraform/customers/${CUSTOMERNAME}/${ID}/output.txt ./output.txt 
    artifacts:
      paths:
      - ./output.txt 
