stages:
    - checkProviderKubernetes
    - preflight
    - build
    - push
    - delete

checkProviderKubernetes:
    image: 
        name: alpine/k8s:1.22.10
    stage: checkProviderKubernetes
    rules: 
        - if: $PROVIDER == "k8s"
          allow_failure: true
    before_script:
      - mkdir ~/.kube/
      - echo ${KUBE_CONFIG} | base64 -d > ~/.kube/config
    script:
        kubectl create namespace ${NAMESPACE}

preflight:
    image: 
      name: alpine:3.14
      entrypoint:
        - /usr/bin/env 
    stage: preflight
    script:
        - apk update && apk add gettext
        - mkdir -p ./terraform/customers/${CUSTOMERNAME}/${ID}
        - envsubst < ./terraform/templates/${MODULE_NAME}.tf > ./terraform/customers/${CUSTOMERNAME}/${ID}/${MODULE_NAME}.tf
    artifacts:
        paths:
        - ./terraform/customers/${CUSTOMERNAME}/${ID}/*

delete:
    image: 
      name: hashicorp/terraform:1.2.6
      entrypoint:
      - /usr/bin/env
    stage: delete
    rules: 
      - if: $STATUS == "deleting"
    script:
        - cd ./terraform/customers/${CUSTOMERNAME}/${ID}/
        - terraform init 
        - terraform destroy -auto-approve 

build:
    image: 
      name: hashicorp/terraform:1.2.6
      entrypoint:
      - /usr/bin/env
    stage: build
    rules: 
    - if: $STATUS != "deleting"
    script:
        - cd ./terraform/customers/${CUSTOMERNAME}/${ID}/
        - terraform init 
        - terraform apply -auto-approve 
    artifacts:
        paths:
        - ./terraform/customers/${CUSTOMERNAME}/${ID}/*

push:
    stage: push
    rules: 
    - if: $STATUS != "deleting"
    image:
      name: alpine:3.15.5
      entrypoint:
        - /usr/bin/env 
    script:
       - mv ./terraform/customers/${CUSTOMERNAME}/${ID}/output.txt ./output.txt 
    artifacts:
      paths:
      - ./output.txt 
